{"ast":null,"code":"import HttpService from './HttpService'; // const authEndpoint = 'api';\n\nconst endpoint = 'auth';\n\nasync function login(credentails) {\n  let userParams = JSON.stringify(credentails);\n  console.log(\"fedsw\", userParams);\n  const user = await HttpService.post(`/auth/login`, userParams);\n  console.log(\"user \", user);\n  return _handleLogin(user);\n}\n\nasync function signup(credentails) {\n  //   console.log(\"credentails\",credentails)\n  if (credentails.MatchingPasswords) {\n    delete credentails.password2;\n    delete credentails.MatchingPasswords;\n  }\n\n  let userParams = JSON.stringify(credentails);\n  let sheckStatus = {};\n  const user = await HttpService.post(`/auth/signup`, userParams); // let sheckStatus = await JSON.parse(user)\n  // sheckStatus = JSON.parse(user)\n\n  console.log(\"user221 ----> \", sheckStatus);\n\n  if (user.status === \"OK\") {\n    // return _handleLogin(user)\n    credentails.password = credentails.password1;\n    login(credentails);\n    return user;\n  } else {\n    return \"ERORR\";\n  } // return user;\n\n}\n\nasync function getClubsList() {\n  const clubsList = await HttpService.get(`/clubs`);\n  return clubsList;\n}\n\nasync function logout() {\n  // await HttpService.post(`${authEndpoint}/logout`);\n  sessionStorage.clear();\n}\n\nfunction _handleLogin(user) {\n  sessionStorage.setItem(endpoint, JSON.stringify(user));\n  return user;\n}\n\nasync function getById(id) {\n  const user = await HttpService.get(`${endpoint}/${id}`);\n  return user;\n}\n\nfunction getUserLoggedIn() {\n  return sessionStorage.getItem('auth');\n}\n\nfunction checkConnection() {\n  const currentUser = getUserLoggedIn();\n\n  if (currentUser) {\n    return true;\n  } else return false;\n}\n\nasync function saveEditedUser(editdUser) {\n  await console.log(\"editdUser\", editdUser);\n  const response = await HttpService.post(\"/auth/saveUser\", editdUser);\n\n  if (response.status === \"OK\") {\n    editdUser = JSON.parse(editdUser);\n    sessionStorage.setItem(\"auth\", JSON.stringify(editdUser));\n  }\n\n  return response;\n}\n\nexport default {\n  login,\n  signup,\n  logout,\n  getById,\n  checkConnection,\n  getUserLoggedIn,\n  getClubsList,\n  saveEditedUser\n};","map":{"version":3,"sources":["C:/Users/eranl/OneDrive/שולחן העבודה/benefixMe/frontend/src/services/UserService.js"],"names":["HttpService","endpoint","login","credentails","userParams","JSON","stringify","console","log","user","post","_handleLogin","signup","MatchingPasswords","password2","sheckStatus","status","password","password1","getClubsList","clubsList","get","logout","sessionStorage","clear","setItem","getById","id","getUserLoggedIn","getItem","checkConnection","currentUser","saveEditedUser","editdUser","response","parse"],"mappings":"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","sourcesContent":["import HttpService from './HttpService';\r\n\r\n// const authEndpoint = 'api';\r\nconst endpoint = 'auth';\r\n\r\nasync function login(credentails) {\r\n  let userParams = JSON.stringify(credentails);\r\n  console.log(\"fedsw\",userParams);\r\n  const user = await HttpService.post(`/auth/login`, userParams);\r\n  console.log(\"user \",user);\r\n  return _handleLogin(user);\r\n}\r\nasync function signup(credentails) { \r\n//   console.log(\"credentails\",credentails)\r\nif (credentails.MatchingPasswords){\r\n  delete credentails.password2\r\n  delete credentails.MatchingPasswords\r\n}  \r\n  let userParams = JSON.stringify(credentails);\r\n  \r\n  let sheckStatus = {};\r\n  const user = await HttpService.post(`/auth/signup`, userParams);\r\n  // let sheckStatus = await JSON.parse(user)\r\n  // sheckStatus = JSON.parse(user)\r\n  \r\n  console.log(\"user221 ----> \",sheckStatus)\r\n  if(user.status === \"OK\"){\r\n    // return _handleLogin(user)\r\n    credentails.password = credentails.password1\r\n    login(credentails)\r\n    return user\r\n      \r\n  }else{\r\n\r\n    return \"ERORR\";\r\n  }\r\n  // return user;\r\n}\r\n\r\nasync function getClubsList( ) {\r\n    \r\n    const clubsList = await HttpService.get(`/clubs`);\r\n    return clubsList;\r\n}\r\n\r\nasync function logout() {\r\n  // await HttpService.post(`${authEndpoint}/logout`);\r\n  \r\n  sessionStorage.clear();\r\n  \r\n}\r\n\r\nfunction _handleLogin(user) {\r\n  sessionStorage.setItem(endpoint, JSON.stringify(user));\r\n  return user;\r\n}\r\n\r\nasync function getById(id) {\r\n  const user = await HttpService.get(`${endpoint}/${id}`);\r\n  return user;\r\n}\r\n\r\nfunction getUserLoggedIn() {\r\n  return sessionStorage.getItem('auth');\r\n}\r\n\r\nfunction checkConnection() {\r\n  const currentUser = getUserLoggedIn();\r\n\r\n  if (currentUser) {\r\n    return true;\r\n  } else return false;\r\n}\r\n\r\nasync function saveEditedUser(editdUser){\r\n  await console.log(\"editdUser\",editdUser);\r\n  const response = await HttpService.post(\"/auth/saveUser\" ,editdUser )\r\n  if (response.status ===\"OK\") {\r\n    editdUser =  JSON.parse(editdUser);\r\n    sessionStorage.setItem(\"auth\", JSON.stringify(editdUser));\r\n\r\n  }\r\n  return response; \r\n}\r\n\r\nexport default {\r\n  login,\r\n  signup,\r\n  logout,\r\n  getById,\r\n  checkConnection,\r\n  getUserLoggedIn,\r\n  getClubsList,\r\n  saveEditedUser,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}